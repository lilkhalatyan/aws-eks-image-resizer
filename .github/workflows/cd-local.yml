name: cd-local

on:
  workflow_dispatch: {}
  push:
    branches:
      - main

jobs:
  build_and_deploy_local:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      API_IMG: ""
      WORKER_IMG: ""

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        run: |
          set -euxo pipefail
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build API image
        env:
          API_NAME: "ghcr.io/${{ github.repository_owner }}/image-resizer-api"
        run: |
          set -euxo pipefail
          API_IMG="${API_NAME}:$GITHUB_SHA"
          docker build -t "$API_IMG" api
          echo "API_IMG=$API_IMG" >> $GITHUB_ENV

      - name: Build Worker image
        env:
          WORKER_NAME: "ghcr.io/${{ github.repository_owner }}/image-resizer-worker"
        run: |
          set -euxo pipefail
          WORKER_IMG="${WORKER_NAME}:$GITHUB_SHA"
          docker build -t "$WORKER_IMG" worker
          echo "WORKER_IMG=$WORKER_IMG" >> $GITHUB_ENV

      - name: Debug images
        run: |
          set -euxo pipefail
          API_IMG="${API_IMG:-}"
          WORKER_IMG="${WORKER_IMG:-}"
          echo "API_IMG=${API_IMG:-not_set}"
          echo "WORKER_IMG=${WORKER_IMG:-not_set}"

      - name: Push images to GHCR (optional for remote pull)
        run: |
          set -euxo pipefail
          API_IMG="${API_IMG:-}"
          WORKER_IMG="${WORKER_IMG:-}"
          if [ -n "$API_IMG" ]; then
            echo "Pushing $API_IMG"
            docker push "$API_IMG"
          else
            echo "API_IMG empty - skipping push"
          fi
          if [ -n "$WORKER_IMG" ]; then
            echo "Pushing $WORKER_IMG"
            docker push "$WORKER_IMG"
          else
            echo "WORKER_IMG empty - skipping push"
          fi

      - name: Create kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: kind

      - name: Load images into kind
        run: |
          set -euxo pipefail
          API_IMG="${API_IMG:-}"
          WORKER_IMG="${WORKER_IMG:-}"
          if [ -n "$API_IMG" ]; then kind load docker-image "$API_IMG" --name kind; else echo "No API_IMG - skip load"; fi
          if [ -n "$WORKER_IMG" ]; then kind load docker-image "$WORKER_IMG" --name kind; else echo "No WORKER_IMG - skip load"; fi

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Deploy LocalStack
        run: |
          set -euxo pipefail
          kubectl apply -f deploy/localstack-deploy.yaml
          kubectl wait --for=condition=ready pod -l app=localstack --timeout=180s

      - name: Helm install app
        run: |
          set -euxo pipefail
          helm upgrade --install image-resizer deploy/charts/image-resizer -f deploy/charts/image-resizer/values-local.yaml --wait --timeout 5m

      - name: Smoke test API
        run: |
          set -euxo pipefail
          kubectl port-forward svc/api 8080:8080 >/tmp/portforward.log 2>&1 &
          sleep 4
          if [ ! -f test.jpg ]; then head -c 1024 /dev/urandom > test.jpg; fi
          curl -s -F "file=@./test.jpg" http://127.0.0.1:8080/upload || true

      - name: Show pods and logs
        run: |
          kubectl get pods -o wide
          kubectl logs -l app=api --tail=100 || true
          kubectl logs -l app=worker --tail=100 || true