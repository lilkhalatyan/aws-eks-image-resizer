name: cd-local
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build_push_validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      API_IMG: ghcr.io/${{ github.repository_owner }}/image-resizer-api:${{ github.sha }}
      WORKER_IMG: ghcr.io/${{ github.repository_owner }}/image-resizer-worker:${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      # Build & push to GHCR (free for public repos)
      - name: Login to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build & push API
        run: |
          docker build -t "$API_IMG" api
          docker push "$API_IMG"

      - name: Build & push Worker
        run: |
          docker build -t "$WORKER_IMG" worker
          docker push "$WORKER_IMG"

      # Create a kind cluster
      - name: Create kind cluster
        uses: helm/kind-action@v1.10.0

     - name: Install tools (jq, nc, curl)
  run: |
    sudo apt-get update
    sudo apt-get install -y jq netcat-openbsd curl

- name: Install Helm (robust with retries)
  run: |
    set -e
    for i in {1..5}; do
      echo "Attempt $i to install Helm..."
      curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash && break
      echo "Helm install failed; retrying in 10s..."
      sleep 10
    done
    helm version

      # Start LocalStack in background
      - name: Start LocalStack
        run: |
          docker run -d --name localstack -p 4566:4566 \
            -e SERVICES=s3,sqs -e AWS_DEFAULT_REGION=us-west-2 \
            localstack/localstack:3
          # Wait for edge to be ready
          for i in {1..30}; do
            if curl -s localhost:4566/_localstack/health | jq -e '.services.s3=="running"' >/dev/null 2>&1; then
              echo "LocalStack ready"; break; fi; sleep 2; done

      # Create S3 + SQS in LocalStack
      - name: Bootstrap Local AWS
        run: |
          pipx install awscli
          export AWS_ENDPOINT_URL=http://localhost:4566
          aws --endpoint-url $AWS_ENDPOINT_URL s3 mb s3://image-resizer-input || true
          aws --endpoint-url $AWS_ENDPOINT_URL s3 mb s3://image-resizer-output || true
          aws --endpoint-url $AWS_ENDPOINT_URL sqs create-queue --queue-name image-resizer-jobs || true
          QURL=$(aws --endpoint-url $AWS_ENDPOINT_URL sqs get-queue-url --queue-name image-resizer-jobs --query 'QueueUrl' --output text)
          echo "QUEUE_URL=$QURL" >> $GITHUB_ENV

      # Deploy Helm with images + LocalStack endpoint
      - name: Deploy chart
        run: |
          helm upgrade --install image-resizer deploy/charts/image-resizer \
            --namespace default --create-namespace \
            --set image.api="$API_IMG" \
            --set image.worker="$WORKER_IMG" \
            --set env.AWS_DEFAULT_REGION=us-west-2 \
            --set env.INPUT_BUCKET=image-resizer-input \
            --set env.OUTPUT_BUCKET=image-resizer-output \
            --set awsEndpoint=http://localstack.default.svc.cluster.local:4566
          kubectl wait --for=condition=available --timeout=180s deploy/api
          kubectl wait --for=condition=available --timeout=180s deploy/worker

      # Port-forward API and run a real request inside the runner
      - name: Smoke test (upload & verify)
        run: |
          # 1) Generate a sample image
          python - <<'PY'
          from PIL import Image
          im = Image.new("RGB", (1024, 768), (200, 120, 40))
          im.save("sample.jpg", "JPEG", quality=85)
          print("wrote sample.jpg")
          PY

          # 2) Background port-forward
          kubectl port-forward deploy/api 8080:8080 >/tmp/pf.log 2>&1 &
          PF_PID=$!
          # Wait for port-forward to come up
          for i in {1..30}; do nc -z localhost 8080 && break || sleep 1; done

          # 3) Upload the image
          curl -s -F "file=@sample.jpg" http://localhost:8080/upload | tee /tmp/upload.json
          JOB=$(jq -r .job_id /tmp/upload.json)
          echo "JOB=$JOB"

          # 4) Give worker a few seconds to process
          sleep 8

          # 5) Verify output object in LocalStack S3 and download it as artifact
          export AWS_ENDPOINT_URL=http://localhost:4566
          aws --endpoint-url $AWS_ENDPOINT_URL s3 ls s3://image-resizer-output/output/
          aws --endpoint-url $AWS_ENDPOINT_URL s3 cp s3://image-resizer-output/output/$JOB.jpg resized.jpg || true

          kill $PF_PID || true

      - name: Upload resized image artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: resized-image
          path: resized.jpg
          if-no-files-found: ignore
